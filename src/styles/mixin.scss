@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';

$mobile-contents-width: 720px;

$one-px: math.div(1px, $mobile-contents-width) * 100;

$digit-chars-map: (
  '0': 0,
  '1': 1,
  '2': 2,
  '3': 3,
  '4': 4,
  '5': 5,
  '6': 6,
  '7': 7,
  '8': 8,
  '9': 9,
);

@function to-length($value, $unit) {
  @if $unit != 'px' {
    @error "Expected 'px', but got #{$unit}.";
  }

  @return $value * 1px;
}

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error "Expected a string, but got #{$value}.";
  }

  $result: 0;
  $digits: 0;
  $minus: string.slice($value, 1, 1) == '-';

  @for $i from if($minus, 2, 1) through string.length($value) {
    $char: string.slice($value, $i, $i);

    @if not(list.index(map.keys($digit-chars-map), $char) or $char == '.') {
      @return to-length(
        if($minus, -$result, $result),
        string.slice($value, $i)
      );
    }

    @if $char == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map.get($digit-chars-map, $char);
    } @else {
      $digits: $digits * 10;
      $result: $result + math.div(map.get($digit-chars-map, $char), $digits);
    }
  }

  @return if($minus, -$result, $result);
}

@function remove-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

@function calc-viewport-width($value) {
  @if type-of($value) == 'number' and math.unit($value) != '' {
    @if math.unit($value) == 'px' {
      @return remove-unit($value * $one-px * 2) + vw;
    } @else {
      @error "Expected 'px', but got #{math.unit($value)}.";
    }
  } @else {
    @return $value;
  }
}

@function is-digit($char) {
  @if type-of($char) == 'string' {
    @return map.get($digit-chars-map, $char) != null;
  } @else {
    @return false;
  }
}

@function tokenization($str) {
  @if type-of($str) == 'string' {
    $tokens: ();
    $cursor: 0;

    @if string.index($str, '(') == null or string.index($str, ')') == null {
      // $str이 translate(), filter() 등의 CSS 함수가 아닌 경우
      @return $tokens;
    }
    @if string.index($str, 'rem') != null or string.index($str, 'em') != null {
      // $str이 px이 아닌 rem, em 단위를 사용하는 경우
      @error "Expected 'px', but got something else.";
    }

    @for $i from 1 through string.length($str) {
      $curr: string.slice($str, $i, $i);
      $next: string.slice($str, $i + 1, $i + 1);

      @if $curr == 'p' and $next == 'x' {
        $chars: '';
        $is-paused: false;

        @for $j from $i - 1 through 0 {
          @if $is-paused {
            // sass doesn't support break statement
          } @else {
            $curr: string.slice($str, $j, $j);

            @if is-digit($curr) or $curr == '.' or $curr == '-' {
              $chars: $curr + $chars;
            } @else {
              $is-paused: true;
            }
          }
        }

        $tokens: list.append(
          $tokens,
          ($chars + 'px', $i - string.length($chars))
        );
      }
    }

    @return $tokens;
  } @else {
    @error "The argument must be a string.";
  }
}

@mixin scale($property, $values) {
  $attributes: ();
  $mobile-attributes: ();

  @each $value in $values {
    @if type-of($value) == 'string' {
      $tokens: tokenization($value);
      $cursor: 1;
      $result: '';
      $expression: $value;

      @each $token in $tokens {
        $raw: list.nth($token, 1);
        $start-index: list.nth($token, 2);
        $viewport-width: calc-viewport-width(to-number($raw));

        $part: string.slice($expression, $cursor, $start-index - 1) +
          $viewport-width;
        $cursor: $start-index + string.length($raw);
        $result: $result + $part;
      }

      $result: $result +
        string.slice($expression, $cursor, string.length($expression));

      $attributes: list.append($attributes, $value);
      $mobile-attributes: list.append(
        $mobile-attributes,
        string.unquote($result)
      );
    } @else if type-of($value) == 'number' {
      $viewport-width: calc-viewport-width($value);
      $attributes: list.append($attributes, $value);
      $mobile-attributes: list.append($mobile-attributes, $viewport-width);
    } @else {
      $attributes: list.append($attributes, $value);
      $mobile-attributes: list.append($mobile-attributes, $value);
    }
  }

  @if length($attributes) > 0 {
    #{$property}: $attributes;
  }

  @if length($mobile-attributes) > 0 {
    @media (max-width: $mobile-contents-width) {
      #{$property}: $mobile-attributes;
    }
  }
}

@mixin on-mobile {
  @media screen and (max-width: $mobile-contents-width) {
    @content;
  }
}
